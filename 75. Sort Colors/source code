/*Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]                 sort 0,1,2
Example 2:
Input: nums = [2,0,1]           leetcode
Output: [0,1,2]*/
void sortColors(vector<int>& nums) {
    //sort(nums.begin(), nums.end()); not to be use  o(nlogn), s.c=o(n);
    
    // int count0=0, count1=0, count2=0;
    // for(int i=0;i<n;i++){
    //     if(v[i]==0) count0++;
    //     else if(v[i]==1) count1++;
    //     else if(v[i]==2) count2++;
    // }
    // int i=0;
    // while(count0--){  // here we are overwriting   t.c=o(n) , s.c=o(n)
    //     v[i]=0;
    //     i++;
    // }
    // while(count1--){
    //     v[i]=1;
    //     i++;
    // }
    // while(count2--){
    //     v[i]=2;
    //     i++;
    // }
    int lo=0, m=0, hi=nums.size()-1;  //in place methode
    while(m<=hi){
        if(nums[m]==0){
            swap(nums[lo],nums[m]);
            lo++;
            m++;
        }else if(nums[m]==1){
            m++;
        }else if(nums[m]==2){
            swap(nums[m], nums[hi]);
            hi--;
        }
    }
    
}

/* in place 3 pointer approach
2 0 2 1 1 0   num[m]==2 swap(nums[m],nums[h]) h--;
m         h
l
0 0 2 1 1 2   num[m]==0 swap(nums[l],nums[m]) l++, m++;
m       h
l
0 0 2 1 1 2   num[m]==0 swap(nums[l],nums[m]) l++, m++;
  m     h
  l
0 0 2 1 1 2   num[m]==2 swap(nums[m],nums[h]) h--;
    m   h
    l
0 0 1 1 2 2   m++;
    m h
    l
0 0 1 1 2 2   m++;
      h
      m
    l  
*/