//https://leetcode.com/problems/k-diff-pairs-in-an-array/description/
 int bs(vector<int>a, int lo, int target){
        int hi=a.size()-1;
        while(lo<=hi){
            int mid=lo+(hi-lo)/2;
            if(a[mid]==target){
                return mid;
            }else if(target>a[mid]){
                lo=mid+1;
            }else{
                hi=mid-1;
            }
        }
        return -1;
    }
    int findPairs(vector<int>& v, int k) {
    /*  2 pointer approch
        sort(v.begin(), v.end());
        int i=0, j=1;
        set<pair<int, int>>s;
        while(j<v.size()){
            int diff=v[j]-v[i];
            if(diff==k){
                s.insert({v[i],v[j]});
                //cout<<v[i]<<" "<<v[j]<<endl;
                i++;
                j++;
            }else if(diff>k){
                i++;
            }else{
                j++;
            }
            if(i==j) j++;
        }
        return s.size();
        */ //methode 2-> bs
        // v[i]-v[j]=k, a[i]=k+a[j]~= curr->a[i], find->a[i]+k (right sub array)
        //3,1,4,1,5 k=2-> 1 1 3 4 3  -> 1, 2+1=3 find(3)->found, {1,3}
        sort(v.begin(), v.end());
        int i=0, j=1;
        set<pair<int, int>>s;
        for(int i=0;i<v.size();i++){
            if(bs(v, i+1, v[i]+k)!=-1){
                s.insert({v[i], v[i]+k});
            }
        }
        return s.size();
    }//nlogn   
